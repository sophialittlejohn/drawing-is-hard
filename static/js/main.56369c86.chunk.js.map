{"version":3,"sources":["pages/home.js","hooks/useCounter.js","reducers/gameReducer.js","helpers.js","components/Canvas.js","hooks/useGameContext.js","components/Rounds.js","hooks/usePrevious.js","components/Task.js","pages/game.js","hooks/useControls.js","pages/game-over.js","App.js","index.js"],"names":["Home","push","useHistory","Container","style","paddingTop","text","Grid","Row","Column","Card","fluid","color","Content","Header","as","raised","fontSize","href","Button","onClick","size","primary","useCounter","useState","counter","setCounter","useEffect","timer","setInterval","clearInterval","startCounter","value","TIME_PER_ROUND","stopCounter","initialGameState","task","round","score","inProgress","gameReducer","state","action","type","payload","Error","getPrediction","theCanvas","model","canvas","tensor","tf","fromPixels","current","resizeNearestNeighbor","mean","expandDims","toFloat","div","predict","data","then","prediction","a","Canvas","React","memo","canvasRef","useRef","lastX","lastY","mouseDown","context","getContext","fillStyle","fillRect","height","width","ref","onMouseDown","onMouseUp","undefined","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","id","border","cursor","GameStateContext","createContext","useGameContext","useContext","Rounds","TOTAL_ROUNDS","usePrevious","typewriterOptions","delay","wrapperClassName","Task","partOne","setPartOne","partTwo","setPartTwo","partThree","setPartThree","previousTask","previousScore","unmountTypewriter","window","setTimeout","initialString","initType","typewriter","strings","callback","typeString","callFunction","start","className","key","options","onInit","Game","replace","totalRounds","labelRef","modelRef","useReducer","dispatch","fetchModels","label","require","document","getElementById","startGame","stopGame","playGame","clearCanvas","guess","controls","useControls","memoizedStateValue","useMemo","Provider","columns","stretched","icon","basic","Icon","name","gameOverCopy","GameOver","useLocation","copy","App","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.56369c86.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Grid, Header, Card, Button } from \"semantic-ui-react\";\n\nexport const Home = () => {\n  const { push } = useHistory();\n\n  return (\n    <Container style={{ paddingTop: \"10%\" }} text>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid color=\"blue\">\n              <Card.Content>\n                <Header as=\"h1\">Drawing Is Hard</Header>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid raised>\n              <Card.Content style={{ fontSize: \"20px\" }}>\n                <p>\n                  This game has been modeled off Google's{\" \"}\n                  <a href=\"https://quickdraw.withgoogle.com/\">Quick, Draw!</a>{\" \"}\n                  game and uses a sampling from the Quick, Draw! dataset.\n                </p>\n                <p>\n                  It was developed in the context of my capstone project at{\" \"}\n                  <a href=\"https://www.extensionschool.ch/\">\n                    EPFL Extension School\n                  </a>\n                  .\n                </p>\n                <p>\n                  Check out the source code in my{\" \"}\n                  <a href=\"https://github.com/sophialittlejohn/drawing-is-hard\">\n                    GitHub repo\n                  </a>\n                  .\n                </p>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Button onClick={() => push(\"/game\")} size=\"massive\" primary fluid>\n              Play\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nimport { TIME_PER_ROUND } from \"../pages/game\";\n\nexport const useCounter = () => {\n  const [counter, setCounter] = useState(null);\n\n  const startCounter = (value) => {\n    setCounter(value || TIME_PER_ROUND);\n  };\n\n  const stopCounter = () => {\n    setCounter(null);\n  };\n\n  useEffect(() => {\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    return () => clearInterval(timer);\n  });\n\n  return {\n    counter,\n    startCounter,\n    stopCounter,\n  };\n};\n","export const initialGameState = {\n  task: null,\n  round: null,\n  score: null,\n  inProgress: null,\n};\n\nexport const gameReducer = (state, action) => {\n  switch (action.type) {\n    case \"START_GAME\":\n      return { round: 1, score: 0, task: action.payload, inProgress: true };\n    case \"NEW_ROUND\":\n      return { ...state, task: action.payload, round: state.round + 1 };\n    case \"WIN_ROUND\":\n      return {\n        ...state,\n        score: state.score + 1,\n        round: state.round + 1,\n        task: action.payload,\n      };\n    case \"GAME_OVER\":\n      return { ...state, inProgress: false, task: null };\n    case \"WIN_GAME\":\n      return { ...state, inProgress: false };\n    default:\n      throw new Error();\n  }\n};\n","import * as tf from \"@tensorflow/tfjs\";\n\nfunction preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf.browser\n    .fromPixels(canvas.current) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(theCanvas, model) {\n  const tensor = preprocessCanvas(theCanvas);\n  return model\n    .predict(tensor)\n    .data()\n    .then(async (prediction) => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n}\n","import React, { useEffect, useRef } from \"react\";\n\nexport const CANVAS_ID = \"myCanvas\";\n\nexport const Canvas = React.memo(() => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {});\n\n  let mouseDown = false;\n  let lastX;\n  let lastY;\n\n  function drawLine(canvas, x, y, lastX, lastY) {\n    let context = canvas.getContext(\"2d\");\n\n    context.strokeStyle = \"#000000\";\n    context.lineWidth = 12;\n    context.lineJoin = \"round\";\n\n    context.beginPath();\n    context.moveTo(lastX, lastY);\n    context.lineTo(x, y);\n    context.closePath();\n    context.stroke();\n\n    return [x, y];\n  }\n\n  const handleMouseup = () => {\n    mouseDown = false;\n    [lastX, lastY] = [undefined, undefined];\n  };\n\n  const handleMousemove = (e) => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (mouseDown) {\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.height, canvas.width);\n  });\n\n  return (\n    <canvas\n      height={300}\n      width={300}\n      ref={canvasRef}\n      onMouseDown={() => (mouseDown = true)}\n      onMouseUp={handleMouseup}\n      onMouseMove={(e) => handleMousemove(e)}\n      id={CANVAS_ID}\n      style={{\n        border: \"3px dotted gray\",\n        cursor: \"pointer\",\n      }}\n    />\n  );\n});\n","import React, { useContext } from \"react\";\n\nexport const GameStateContext = React.createContext();\n\nexport const useGameContext = () => {\n  const context = useContext(GameStateContext);\n  if (!context) {\n    throw new Error(\"This component must be used within a <Game /> component.\");\n  }\n  return context;\n};\n","import React from \"react\";\n\nimport { useGameContext } from \"../hooks/useGameContext\";\nimport { TOTAL_ROUNDS } from \"../pages/game\";\n\nexport const Rounds = () => {\n  const round = useGameContext();\n  return (\n    <div>\n      Round {round.round} of {TOTAL_ROUNDS}\n    </div>\n  );\n};\n","import { useRef, useEffect } from \"react\";\n\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\nimport Typewriter from \"typewriter-effect\";\nimport \"../styles/typewriter.css\";\n\nimport { usePrevious } from \"../hooks/usePrevious\";\nimport { useGameContext } from \"../hooks/useGameContext\";\nimport { TIME_PER_ROUND, TOTAL_ROUNDS } from \"../pages/game\";\n\nconst typewriterOptions = {\n  delay: 50,\n  cursor: \" \",\n  wrapperClassName: \"wrapper\",\n};\n\nexport const Task = ({ startCounter }) => {\n  const [partOne, setPartOne] = useState(null);\n  const [partTwo, setPartTwo] = useState(null);\n  const [partThree, setPartThree] = useState(null);\n\n  const { counter, task, score, inProgress, round } = useGameContext();\n  const previousTask = usePrevious(task);\n  const previousScore = usePrevious(score);\n\n  const unmountTypewriter = () => {\n    setPartOne(null);\n    setPartTwo(null);\n    setPartThree(null);\n  };\n\n  useEffect(() => {\n    if (counter === 0) {\n      unmountTypewriter();\n    }\n    if (score && previousScore !== score) {\n      unmountTypewriter();\n      window.setTimeout(() => setPartOne(\"Nice sketch! You have\"));\n    } else if (\n      inProgress &&\n      task &&\n      previousTask !== task &&\n      round < TOTAL_ROUNDS + 1\n    ) {\n      let initialString = \"Close... you have \";\n      if (round === 1) {\n        initialString = \"Let's get started, you have \";\n      }\n      window.setTimeout(() => setPartOne(initialString));\n    }\n  }, [counter, inProgress, previousTask, task, score, previousScore, round]);\n\n  const initType = (typewriter, strings, callback) => {\n    typewriter.typeString(strings).callFunction(callback).start();\n  };\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        {partOne && (\n          <Typewriter\n            key={partOne}\n            options={typewriterOptions}\n            onInit={(typewriter) =>\n              initType(typewriter, partOne, () =>\n                setPartTwo(\"seconds to draw a\")\n              )\n            }\n          />\n        )}\n        {partTwo && (\n          <>\n            <span className=\"whitespace\">{counter || TIME_PER_ROUND}</span>\n            <Typewriter\n              key={partTwo}\n              options={typewriterOptions}\n              onInit={(typewriter) =>\n                initType(typewriter, partTwo, () =>\n                  setPartThree(\"in the box to the left.\")\n                )\n              }\n            />\n          </>\n        )}\n        {partThree && (\n          <>\n            <span className=\"whitespace\">{task}</span>\n            <Typewriter\n              key={partThree}\n              options={typewriterOptions}\n              onInit={(typewriter) =>\n                initType(typewriter, partThree, () => startCounter())\n              }\n            />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useMemo } from \"react\";\nimport { Container, Header, Card, Button, Grid, Icon } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useControls } from \"../hooks/useControls\";\nimport { Rounds } from \"../components/Rounds\";\nimport { Task } from \"../components/Task\";\nimport { Canvas } from \"../components/Canvas\";\nimport { GameStateContext } from \"../hooks/useGameContext\";\n\nexport const TOTAL_ROUNDS = 10;\nexport const TIME_PER_ROUND = 20;\n\nexport const Game = () => {\n  const { replace } = useHistory();\n  const { state, controls } = useControls();\n\n  useEffect(() => {\n    if (state.inProgress === false) {\n      replace(\"game-over\", { score: state.score });\n    }\n  });\n\n  const memoizedStateValue = useMemo(() => state, [state]);\n\n  return (\n    <GameStateContext.Provider value={{ ...memoizedStateValue }}>\n      <Container style={{ paddingTop: \"10%\" }} text>\n        <Grid columns=\"equal\">\n          <Grid.Row>\n            <Grid.Column>\n              <Card fluid color=\"olive\">\n                <Card.Content>\n                  <Header as=\"h2\">\n                    {\" \"}\n                    <Rounds />\n                  </Header>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Grid.Column>\n              <Card fluid raised>\n                <Card.Content style={{ fontSize: \"20px\" }}>\n                  <Grid columns=\"equal\">\n                    <Grid.Row>\n                      <Grid.Column>\n                        <Canvas />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <Task startCounter={controls.startCounter} />\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width=\"14\">\n              <Button\n                onClick={controls.clearCanvas}\n                size=\"massive\"\n                color=\"olive\"\n                fluid\n              >\n                Clear Canvas\n              </Button>\n            </Grid.Column>\n            <Grid.Column width=\"two\">\n              <Button\n                onClick={() => replace(\"/\")}\n                size=\"massive\"\n                fluid\n                icon\n                basic\n                color=\"olive\"\n              >\n                <Icon name=\"home\" />\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </GameStateContext.Provider>\n  );\n};\n","import * as tf from \"@tensorflow/tfjs\";\nimport { useEffect, useReducer, useRef } from \"react\";\nimport { useCounter } from \"./useCounter\";\nimport { gameReducer, initialGameState } from \"../reducers/gameReducer\";\nimport { getPrediction } from \"../helpers\";\nimport { TOTAL_ROUNDS } from \"../pages/game\";\nimport { CANVAS_ID } from \"../components/Canvas\";\n\nexport const useControls = (totalRounds = TOTAL_ROUNDS) => {\n  const labelRef = useRef(null);\n  const modelRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const { startCounter, counter, stopCounter } = useCounter();\n  const [{ round, task, inProgress, score }, dispatch] = useReducer(\n    gameReducer,\n    initialGameState\n  );\n\n  const fetchModels = async () => {\n    const model = await tf.loadLayersModel(\"../../model/model.json\");\n    const label = require(\"./../labels.json\");\n\n    labelRef.current = label;\n    modelRef.current = model;\n    canvasRef.current = document.getElementById(CANVAS_ID);\n    startGame();\n  };\n\n  const startGame = () => {\n    dispatch({ type: \"START_GAME\", payload: labelRef.current[0] });\n  };\n\n  const stopGame = () => {\n    stopCounter();\n    dispatch({ type: \"GAME_OVER\" });\n  };\n\n  const playGame = () => {\n    if (score === totalRounds) {\n      stopCounter();\n      dispatch({ type: \"WIN_GAME\" });\n    } else if (round === totalRounds + 1) {\n      stopCounter();\n      dispatch({ type: \"GAME_OVER\" });\n    } else if (counter === 0) {\n      clearCanvas(canvasRef);\n      stopCounter();\n      dispatch({ type: \"NEW_ROUND\", payload: labelRef.current[round] });\n    } else {\n      return;\n    }\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n  };\n\n  const guess = async () => {\n    if (modelRef && modelRef.current && canvasRef && canvasRef.current) {\n      const prediction = await getPrediction(canvasRef, modelRef.current);\n\n      if (prediction && labelRef.current[prediction[0]] === task) {\n        clearCanvas(canvasRef);\n        stopCounter();\n        dispatch({ type: \"WIN_ROUND\", payload: labelRef.current[round] });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchModels();\n  }, []);\n\n  useEffect(() => {\n    if (inProgress) {\n      playGame();\n    }\n  });\n\n  useEffect(() => {\n    if (inProgress && counter && counter < 18) {\n      guess();\n    }\n  });\n\n  return {\n    controls: {\n      startGame,\n      stopGame,\n      clearCanvas,\n      guess,\n      startCounter,\n    },\n    state: {\n      inProgress,\n      task,\n      counter,\n      round,\n      score,\n    },\n  };\n};\n","import React from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { Container, Header, Grid, Card, Button, Icon } from \"semantic-ui-react\";\n\nconst gameOverCopy = {\n  low: \"Hmmm, you can probably do better than that!\",\n  mid: \"Not so shabby. Bet you can beat that in the next round!\",\n  high: \"Wow, impressive! You deserve a margarita at the beach 🍸🌴\",\n};\n\nexport const GameOver = () => {\n  const { replace } = useHistory();\n  const { state } = useLocation();\n\n  const score = state ? state.score : 0;\n\n  const copy =\n    score >= 9\n      ? gameOverCopy.high\n      : score >= 5\n      ? gameOverCopy.mid\n      : gameOverCopy.low;\n\n  return (\n    <Container style={{ paddingTop: \"10%\" }} text>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid color=\"blue\">\n              <Card.Content>\n                <Header as=\"h1\">Drawing is hard - Final score {score}</Header>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid raised>\n              <Card.Content style={{ fontSize: \"20px\" }}>\n                <p>GAME OVER!</p>\n                <p>\n                  You scored <strong>{score}</strong> points.\n                </p>\n                <p>{copy}</p>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column width=\"14\">\n            <Button\n              onClick={() => replace(\"/game\")}\n              size=\"massive\"\n              color=\"blue\"\n              fluid\n            >\n              Play again\n            </Button>\n          </Grid.Column>\n          <Grid.Column width=\"two\">\n            <Button\n              onClick={() => replace(\"/\")}\n              size=\"massive\"\n              fluid\n              icon\n              basic\n              color=\"blue\"\n            >\n              <Icon name=\"home\" />\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Home } from \"./pages/home\";\nimport { Game } from \"./pages/game\";\nimport { GameOver } from \"./pages/game-over\";\n\nexport const App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/game\">\n          <Game />\n        </Route>\n        <Route path=\"/game-over\">\n          <GameOver />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}