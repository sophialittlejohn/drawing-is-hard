{"version":3,"sources":["pages/home.js","reducers/gameReducer.js","helpers.js","hooks/useGameContext.js","components/Canvas.js","lib/shuffle.js","hooks/useControls.js","hooks/useCounter.js","components/Rounds.js","hooks/usePrevious.js","components/Task.js","pages/play.js","pages/game-over.js","pages/settings.js","App.js","index.js"],"names":["Home","push","useHistory","state","useLocation","Container","style","paddingTop","text","Grid","Row","Column","Card","fluid","color","Content","Header","as","raised","fontSize","href","width","Button","onClick","size","primary","icon","Icon","name","initialGameState","task","round","score","inProgress","gameReducer","action","type","payload","Error","getPrediction","theCanvas","model","canvas","tensor","tf","fromPixels","current","resizeNearestNeighbor","mean","expandDims","toFloat","div","predict","data","then","prediction","a","GameStateContext","React","createContext","useGameContext","context","useContext","Canvas","memo","guess","counter","canvasRef","useRef","useState","mouseDown","setMouseDown","x","undefined","y","last","setLast","useEffect","getContext","fillStyle","fillRect","height","ref","onMouseDown","onMouseUp","onMouseMove","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","lastX","lastY","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","id","border","cursor","shuffle","i","length","j","Math","floor","random","useControls","totalRounds","timePerRound","labelRef","taskRef","modelRef","setCounter","timer","setInterval","clearInterval","startCounter","stopCounter","useCounter","useReducer","dispatch","label","require","document","getElementById","startGame","fetchModels","clearCanvas","controls","stopGame","Rounds","usePrevious","value","typewriterOptions","delay","wrapperClassName","Task","partOne","setPartOne","partTwo","setPartTwo","partThree","setPartThree","previousTask","previousScore","unmountTypewriter","window","setTimeout","initialString","renderTypewriter","key","message","callback","options","onInit","typewriter","strings","typeString","callFunction","start","initType","one","two","className","three","Play","location","rounds","secondsPerRound","seconds","memoizedStateValue","useMemo","Provider","columns","stretched","basic","gameOverCopy","GameOver","replace","copy","aria-label","Settings","setRounds","setSeconds","display","justifyContent","flexDirection","marginBottom","htmlFor","min","max","step","onChange","parseInt","App","basename","process","exact","path","ReactDOM","render"],"mappings":"ukBAIaA,EAAO,WAAO,IAAD,EAChBC,EAASC,cAATD,KACAE,EAAUC,cAAVD,MAER,OACE,kBAACE,EAAA,EAAD,CAAWC,MAAO,CAAEC,WAAY,OAASC,MAAI,GAC3C,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,MAAM,QAChB,kBAACF,EAAA,EAAKG,QAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,uBAKR,kBAACR,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACK,QAAM,GAChB,kBAACN,EAAA,EAAKG,QAAN,CAAcT,MAAO,CAAEa,SAAU,SAC/B,qEAC0C,IACxC,uBAAGC,KAAK,qCAAR,gBAA6D,IAF/D,2DAKA,uFAC4D,IAC1D,uBAAGA,KAAK,mCAAR,yBAFF,KAOA,6DACkC,IAChC,uBAAGA,KAAK,uDAAR,eAFF,SAWR,kBAACX,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,CAAaU,MAAM,MACjB,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAMtB,EAAK,QAASE,IAC7BqB,KAAK,UACLC,SAAO,EACPZ,OAAK,GAJP,SASF,kBAACJ,EAAA,EAAKE,OAAN,CAAaU,MAAM,KACjB,kBAACC,EAAA,GAAD,GACEI,MAAI,EACJF,KAAK,UACLX,OAAK,GAHP,4EAMW,kBAAMZ,EAAK,gBANtB,GAQE,kBAAC0B,EAAA,EAAD,CAAMC,KAAK,mB,0DCnEZC,EAAmB,CAC9BC,KAAM,KACNC,MAAO,KACPC,MAAO,KACPC,WAAY,MAGDC,EAAc,SAAC/B,EAAOgC,GACjC,OAAQA,EAAOC,MACb,IAAK,aACH,MAAO,CAAEL,MAAO,EAAGC,MAAO,EAAGF,KAAMK,EAAOE,QAASJ,YAAY,GACjE,IAAK,YACH,OAAO,2BAAK9B,GAAZ,IAAmB2B,KAAMK,EAAOE,QAASN,MAAO5B,EAAM4B,MAAQ,IAChE,IAAK,YACH,OAAO,2BACF5B,GADL,IAEE6B,MAAO7B,EAAM6B,MAAQ,EACrBD,MAAO5B,EAAM4B,MAAQ,EACrBD,KAAMK,EAAOE,UAEjB,IAAK,YACH,OAAO,2BAAKlC,GAAZ,IAAmB8B,YAAY,EAAOH,KAAM,OAC9C,IAAK,WACH,OAAO,2BAAK3B,GAAZ,IAAmB8B,YAAY,IACjC,QACE,MAAM,IAAIK,QCXT,SAASC,EAAcC,EAAWC,GACvC,IAbwBC,EAalBC,GAbkBD,EAaQF,EAXnBI,IACVC,WAAWH,EAAOI,SAClBC,sBAAsB,CAAC,GAAI,KAC3BC,KAAK,GACLC,WAAW,GACXA,aACAC,UACWC,IAAI,MAKlB,OAAOV,EACJW,QAAQT,GACRU,OACAC,KAHI,uCAGC,WAAOC,GAAP,SAAAC,EAAA,sEAA4BZ,IAAUW,GAAYF,OAAlD,mFAHD,uDCdF,IAAMI,EAAmBC,IAAMC,gBAEzBC,EAAiB,WAC5B,IAAMC,EAAUC,qBAAWL,GAC3B,IAAKI,EACH,MAAM,IAAIvB,MAAM,4DAElB,OAAOuB,GCJIE,EAASL,IAAMM,MAAK,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACdL,IAAxBM,EADsC,EACtCA,QAASjC,EAD6B,EAC7BA,WACXkC,EAAYC,iBAAO,MAFqB,EAGZC,oBAAS,GAHG,mBAGvCC,EAHuC,KAG5BC,EAH4B,OAItBF,mBAAS,CAC/BG,OAAGC,EACHC,OAAGD,IANyC,mBAIvCE,EAJuC,KAIjCC,EAJiC,KAS9CC,qBAAU,WACJP,GAAarC,GAAciC,GAAWA,EAAU,IAClDD,MAED,CAACK,EAAWrC,EAAYiC,EAASD,IA0CpC,OARAY,qBAAU,WACR,IAAMnC,EAASyB,EAAUrB,QACnBe,EAAUnB,EAAOoC,WAAW,MAElCjB,EAAQkB,UAAY,UACpBlB,EAAQmB,SAAS,EAAG,EAAGtC,EAAOuC,OAAQvC,EAAOrB,SAC5C,IAGD,4BACE4D,OAAQ,IACR5D,MAAO,IACP6D,IAAKf,EACLgB,YAAa,kBAAMZ,GAAa,IAChCa,UA9BkB,WACpBb,GAAa,GACbK,EAAQ,CAAEJ,OAAGC,EAAWC,OAAGD,KA6BzBY,YAAa,SAACC,GAAD,OA1BO,SAACA,GACvB,IAAMC,EAAOD,EAAEE,OAAOC,wBAChBjB,EAAIc,EAAEI,QAAUH,EAAKI,KACrBjB,EAAIY,EAAEM,QAAUL,EAAKM,IAE3B,GAAIvB,EAAW,CAAC,IAAD,EA1BjB,SAAkB5B,EAAQ8B,EAAGE,EAAGoB,EAAOC,GACrC,IAAIlC,EAAUnB,EAAOoC,WAAW,MAYhC,OAVAjB,EAAQmC,YAAc,UACtBnC,EAAQoC,UAAY,GACpBpC,EAAQqC,SAAW,QAEnBrC,EAAQsC,YACRtC,EAAQuC,OAAON,EAAOC,GACtBlC,EAAQwC,OAAO7B,EAAGE,GAClBb,EAAQyC,YACRzC,EAAQ0C,SAED,CAAC/B,EAAGE,GAcc8B,CAASlB,EAAEE,OAAQhB,EAAGE,EAAGC,EAAKH,EAAGG,EAAKD,GADhD,mBACNoB,EADM,KACCC,EADD,KAEbnB,EAAQ,CAAEJ,EAAGsB,EAAOpB,EAAGqB,KAmBHU,CAAgBnB,IACpCoB,GAjEmB,WAkEnBpG,MAAO,CACLqG,OAAQ,kBACRC,OAAQ,gBCnET,SAASC,EAAQrD,GACtB,IAAK,IAAIsD,EAAItD,EAAEuD,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADL,EAEtB,CAACtD,EAAEwD,GAAIxD,EAAEsD,IAAvBtD,EAAEsD,GAFkC,KAE9BtD,EAAEwD,GAF4B,KAIvC,OAAOxD,ECDF,IAAM4D,EAAc,SAACC,EAAaC,GACvC,IAAMC,EAAWnD,iBAAO,MAClBoD,EAAUpD,iBAAO,MACjBqD,EAAWrD,iBAAO,MAClBD,EAAYC,iBAAO,MAJ+B,ECNhC,SAACkD,GAAkB,IAAD,EACZjD,mBAAS,MADG,mBACnCH,EADmC,KAC1BwD,EAD0B,KAiB1C,OANA7C,qBAAU,WACR,IAAM8C,EACJzD,EAAU,GAAK0D,aAAY,kBAAMF,EAAWxD,EAAU,KAAI,KAC5D,OAAO,kBAAM2D,cAAcF,OAGtB,CACLzD,UACA4D,aAhBmB,WACnBJ,EAAWJ,IAgBXS,YAbkB,WAClBL,EAAW,QDIkCM,CAAWV,GAAlDQ,EANgD,EAMhDA,aAAc5D,EANkC,EAMlCA,QAAS6D,EANyB,EAMzBA,YANyB,EAODE,qBACrD/F,EACAL,GATsD,0BAO/CE,EAP+C,EAO/CA,MAAOD,EAPwC,EAOxCA,KAAMG,EAPkC,EAOlCA,WAAYD,EAPsB,EAOtBA,MAASkG,EAPa,KAYxDrD,qBAAU,YACS,uCAAG,8BAAArB,EAAA,sEACEZ,IAAmB,sBADrB,OACZH,EADY,OAEZ0F,EAAQC,EAAQ,KAEtBb,EAASzE,QAAT,YAAuBqF,GACvBX,EAAQ1E,QAAU+D,EAAQ,YAAIsB,IAC9BV,EAAS3E,QAAUL,EACnB0B,EAAUrB,QAAUuF,SAASC,eFzBV,YE0BnBC,IARkB,2CAAH,qDAUjBC,KACC,IAEH,IAAMD,EAAY,WAChBL,EAAS,CAAE9F,KAAM,aAAcC,QAASmF,EAAQ1E,QAAQ,MAqBpD2F,EAAc,WAClB,IAAM/F,EAASyB,EAAUrB,QACbJ,EAAOoC,WAAW,MAC1BE,SAAS,EAAG,EAAGtC,EAAOuC,OAAQvC,EAAOrB,QAGrC4C,EAAK,uCAAG,4BAAAT,EAAA,2DACRiE,GAAYA,EAAS3E,SAAWqB,GAAaA,EAAUrB,SAD/C,gCAEeP,EAAc4B,EAAWsD,EAAS3E,SAFjD,QAEJS,EAFI,SAGQgE,EAASzE,QAAQS,EAAW,MAAQzB,IACpD2G,EAAYtE,GACZ4D,IACAG,EAAS,CAAE9F,KAAM,YAAaC,QAASmF,EAAQ1E,QAAQf,MAN/C,2CAAH,qDAiBX,OANA8C,qBAAU,WACJ5C,IA9BAD,IAAUqF,GACZU,IACAG,EAAS,CAAE9F,KAAM,cACRL,IAAUsF,EAAc,GACjCU,IACAG,EAAS,CAAE9F,KAAM,eACI,IAAZ8B,IACTuE,EAAYtE,GACZ4D,IACAG,EAAS,CAAE9F,KAAM,YAAaC,QAASmF,EAAQ1E,QAAQf,UA0BpD,CACL2G,SAAU,CACRH,YACAI,SA5Ca,WACfZ,IACAG,EAAS,CAAE9F,KAAM,eA2CfqG,cACAxE,QACA6D,gBAEF3H,MAAO,CACL8B,aACAH,OACAoC,UACAnC,QACAC,QACAqF,cACAC,kBE1FOsB,EAAS,WAAO,IAAD,EACKhF,IAAvB7B,EADkB,EAClBA,MAAOsF,EADW,EACXA,YACf,OACE,sCACStF,EADT,OACoBsF,I,kBCNXwB,G,OAAc,SAACC,GAC1B,IAAM5D,EAAMd,mBAIZ,OAHAS,qBAAU,WACRK,EAAIpC,QAAUgG,KAET5D,EAAIpC,UCAPiG,EAAoB,CACxBC,MAAO,GACPpC,OAAQ,IACRqC,iBAAkB,WAGPC,EAAO,SAAC,GAAsB,IAApBpB,EAAmB,EAAnBA,aAAmB,EACVzD,mBAAS,MADC,mBACjC8E,EADiC,KACxBC,EADwB,OAEV/E,mBAAS,MAFC,mBAEjCgF,EAFiC,KAExBC,EAFwB,OAGNjF,mBAAS,MAHH,mBAGjCkF,EAHiC,KAGtBC,EAHsB,OAapC5F,IAPFM,EANsC,EAMtCA,QACApC,EAPsC,EAOtCA,KACAE,EARsC,EAQtCA,MACAC,EATsC,EAStCA,WACAF,EAVsC,EAUtCA,MACAsF,EAXsC,EAWtCA,YACAC,EAZsC,EAYtCA,aAEImC,EAAeZ,EAAY/G,GAC3B4H,EAAgBb,EAAY7G,GAE5B2H,EAAoB,WACxBP,EAAW,MACXE,EAAW,MACXE,EAAa,OASf3E,qBANA,WACkB,IAAZX,GACFyF,MAIwB,CAACzF,IAE7BW,qBAAU,WACR,GAAI7C,GAAS0H,IAAkB1H,EAC7B2H,IACAC,OAAOC,YAAW,kBAAMT,EAAW,iCAC9B,GACLnH,GACAH,GACA2H,IAAiB3H,GACjBC,EAAQsF,EAAc,EACtB,CACA,IAAIyC,EAAgB,qBACN,IAAV/H,IACF+H,EAAgB,gCAElBF,OAAOC,YAAW,kBAAMT,EAAWU,SAEpC,CAAC7H,EAAYwH,EAAc3H,EAAME,EAAO0H,EAAe3H,IAE1D,IAIMgI,EAAmB,SAACC,EAAKC,EAASC,GAAf,OACvB,oCACGD,EACD,kBAAC,IAAD,CACED,IAAKA,EACLG,QAASpB,EACTqB,OAAQ,SAACC,GAAD,OAVG,SAACA,EAAYC,EAASJ,GACrCG,EAAWE,WAAWD,GAASE,aAAaN,GAAUO,QAS1BC,CAASL,EAAYL,EAAKE,QAKlDS,EACJxB,GACAY,EAAiBZ,EAAS,MAAM,kBAAMG,EAAW,wBAC7CsB,EACJvB,GACAU,EACEV,EACA,0BAAMwB,UAAU,cAAc3G,GAAWoD,IACzC,kBAAMkC,EAAa,8BAEjBsB,EACJvB,GACAQ,EACER,EACA,0BAAMsB,UAAU,cAAc/I,IAC9B,kBAAMgG,OAGV,OACE,yBAAK+C,UAAU,WACZF,EACAC,EACAE,ICtFMC,EAAO,WAAO,IAAD,IAChB9K,EAASC,cAATD,KACF+K,EAAW5K,cACXiH,GAAc,UAAA2D,EAAS7K,aAAT,eAAgB8K,SANV,GAOpBC,GAAkB,UAAAF,EAAS7K,aAAT,eAAgBgL,UANZ,GAEJ,EAMI/D,EAAYC,EAAa6D,GAA7C/K,EANgB,EAMhBA,MAAOuI,EANS,EAMTA,SAEf7D,qBAAU,YACiB,IAArB1E,EAAM8B,YACRhC,EAAK,YAAa,CAAE+B,MAAO7B,EAAM6B,WAIrC,IAAMoJ,EAAqBC,mBAAQ,kBAAMlL,IAAO,CAACA,IAEjD,OACE,kBAACsD,EAAiB6H,SAAlB,CAA2BxC,MAAK,eAAOsC,IACrC,kBAAC/K,EAAA,EAAD,CAAWC,MAAO,CAAEC,WAAY,OAASC,MAAI,GAC3C,kBAACC,EAAA,EAAD,CAAM8K,QAAQ,SACZ,kBAAC9K,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,MAAM,SAChB,kBAACF,EAAA,EAAKG,QAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MACT,kBAAC,EAAD,WAMV,kBAACR,EAAA,EAAKC,IAAN,CAAU8K,WAAS,GACjB,kBAAC/K,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACK,QAAM,GAChB,kBAACN,EAAA,EAAKG,QAAN,CAAcT,MAAO,CAAEa,SAAU,SAC/B,kBAACV,EAAA,EAAD,CAAM8K,QAAQ,SACZ,kBAAC9K,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACoD,EAAD,CAAQE,MAAOyE,EAASzE,SAE1B,kBAACxD,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CAAMmH,aAAcY,EAASZ,sBAQ3C,kBAACrH,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,CAAaU,MAAM,MACjB,kBAACC,EAAA,EAAD,CACEC,QAASmH,EAASD,YAClBjH,KAAK,UACLV,MAAM,QACND,OAAK,GAJP,iBASF,kBAACJ,EAAA,EAAKE,OAAN,CAAaU,MAAM,OACjB,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAMtB,EAAK,MACpBuB,KAAK,UACLX,OAAK,EACLa,MAAI,EACJ+J,OAAK,EACL3K,MAAM,SAEN,kBAACa,EAAA,EAAD,CAAMC,KAAK,gBC9ErB8J,EACC,8CADDA,EAEC,0DAFDA,EAGE,iFAGKC,EAAW,WAAO,IACrBC,EAAY1L,cAAZ0L,QACAzL,EAAUC,cAAVD,MAEF6B,EAAQ7B,EAAQA,EAAM6B,MAAQ,EAE9B6J,EACJ7J,GAAS,EACL0J,EACA1J,GAAS,EACT0J,EACAA,EAEN,OACE,kBAACrL,EAAA,EAAD,CAAWC,MAAO,CAAEC,WAAY,OAASC,MAAI,GAC3C,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,MAAM,QAChB,kBAACF,EAAA,EAAKG,QAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,iCAA+Ce,OAKvD,kBAACvB,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACK,QAAM,GAChB,kBAACN,EAAA,EAAKG,QAAN,CAAcT,MAAO,CAAEa,SAAU,SAC/B,yCACA,yCACa,gCAASa,GADtB,YAGA,2BAAI6J,OAKZ,kBAACpL,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,CAAaU,MAAM,MACjB,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAMqK,EAAQ,UACvBpK,KAAK,UACLV,MAAM,OACND,OAAK,GAJP,eASF,kBAACJ,EAAA,EAAKE,OAAN,CAAaU,MAAM,OACjB,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAMqK,EAAQ,MACvBpK,KAAK,UACLX,OAAK,EACLa,MAAI,EACJ+J,OAAK,EACL3K,MAAM,OACNgL,aAAW,QAEX,kBAACnK,EAAA,EAAD,CAAMC,KAAK,eChEZmK,EAAW,WAAO,IACrB9L,EAASC,cAATD,KADoB,EAEAoE,mBAAS,IAFT,mBAErB4G,EAFqB,KAEbe,EAFa,OAGE3H,mBAAS,IAHX,mBAGrB8G,EAHqB,KAGZc,EAHY,KAK5B,OACE,kBAAC5L,EAAA,EAAD,CAAWC,MAAO,CAAEC,WAAY,OAASC,MAAI,GAC3C,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,MAAM,UAChB,kBAACF,EAAA,EAAKG,QAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,gBAKR,kBAACR,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACK,QAAM,GAChB,kBAACN,EAAA,EAAKG,QAAN,CACET,MAAO,CACLa,SAAU,OACV+K,QAAS,OACTC,eAAgB,gBAChBC,cAAe,WAGjB,yBACE9L,MAAO,CACLa,SAAU,OACV+K,QAAS,OACTC,eAAgB,gBAChBE,aAAc,SAGhB,2BAAOC,QAAQ,UAAf,oBACA,2BACElK,KAAK,QACLsE,GAAG,SACH9E,KAAK,SACL2K,IAAI,IACJC,IAAI,KACJC,KAAK,IACL3D,MAAOmC,EACPyB,SAAU,SAACpH,GAAD,OAAO0G,EAAUW,SAASrH,EAAEE,OAAOsD,WAE9CmC,GAEH,yBACE3K,MAAO,CACLa,SAAU,OACV+K,QAAS,OACTC,eAAgB,kBAGlB,2BAAOG,QAAQ,UAAf,qBACA,2BACElK,KAAK,QACLsE,GAAG,SACH9E,KAAK,SACL2K,IAAI,IACJC,IAAI,KACJC,KAAK,IACL3D,MAAOqC,EACPuB,SAAU,SAACpH,GAAD,OAAO2G,EAAWU,SAASrH,EAAEE,OAAOsD,WAE/CqC,OAMX,kBAAC1K,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACW,EAAA,EAAD,CACEC,QAAS,kBAAMtB,EAAK,IAAK,CAAEgL,SAAQE,aACnC3J,KAAK,UACLV,MAAM,SACND,OAAK,GAJP,yBCvEC+L,EAAM,WACjB,OACE,kBAAC,IAAD,CAAQC,SAAUC,oBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,UClBVC,IAASC,OAAO,kBAAC,EAAD,MAAS7E,SAASC,eAAe,W","file":"static/js/main.d10104d8.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Container, Grid, Header, Card, Button, Icon } from \"semantic-ui-react\";\n\nexport const Home = () => {\n  const { push } = useHistory();\n  const { state } = useLocation();\n\n  return (\n    <Container style={{ paddingTop: \"10%\" }} text>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid color=\"blue\">\n              <Card.Content>\n                <Header as=\"h1\">Drawing Is Hard</Header>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid raised>\n              <Card.Content style={{ fontSize: \"20px\" }}>\n                <p>\n                  This game has been modeled off Google's{\" \"}\n                  <a href=\"https://quickdraw.withgoogle.com/\">Quick, Draw!</a>{\" \"}\n                  game and uses a sampling from the Quick, Draw! dataset.\n                </p>\n                <p>\n                  It was developed in the context of my capstone project at{\" \"}\n                  <a href=\"https://www.extensionschool.ch/\">\n                    EPFL Extension School\n                  </a>\n                  .\n                </p>\n                <p>\n                  Check out the source code in my{\" \"}\n                  <a href=\"https://github.com/sophialittlejohn/drawing-is-hard\">\n                    GitHub repo\n                  </a>\n                  .\n                </p>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column width=\"14\">\n            <Button\n              onClick={() => push(\"/play\", state)}\n              size=\"massive\"\n              primary\n              fluid\n            >\n              Play\n            </Button>\n          </Grid.Column>\n          <Grid.Column width=\"2\">\n            <Button\n              icon\n              size=\"massive\"\n              fluid\n              icon\n              basic\n              onClick={() => push(\"/settings\")}\n            >\n              <Icon name=\"settings\" />\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n","export const initialGameState = {\n  task: null,\n  round: null,\n  score: null,\n  inProgress: null,\n};\n\nexport const gameReducer = (state, action) => {\n  switch (action.type) {\n    case \"START_GAME\":\n      return { round: 1, score: 0, task: action.payload, inProgress: true };\n    case \"NEW_ROUND\":\n      return { ...state, task: action.payload, round: state.round + 1 };\n    case \"WIN_ROUND\":\n      return {\n        ...state,\n        score: state.score + 1,\n        round: state.round + 1,\n        task: action.payload,\n      };\n    case \"GAME_OVER\":\n      return { ...state, inProgress: false, task: null };\n    case \"WIN_GAME\":\n      return { ...state, inProgress: false };\n    default:\n      throw new Error();\n  }\n};\n","import * as tf from \"@tensorflow/tfjs\";\n\nfunction preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf.browser\n    .fromPixels(canvas.current) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(theCanvas, model) {\n  const tensor = preprocessCanvas(theCanvas);\n  return model\n    .predict(tensor)\n    .data()\n    .then(async (prediction) => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n}\n","import React, { useContext } from \"react\";\n\nexport const GameStateContext = React.createContext();\n\nexport const useGameContext = () => {\n  const context = useContext(GameStateContext);\n  if (!context) {\n    throw new Error(\"This component must be used within a <Game /> component.\");\n  }\n  return context;\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useGameContext } from \"../hooks/useGameContext\";\n\nexport const CANVAS_ID = \"myCanvas\";\n\nexport const Canvas = React.memo(({ guess }) => {\n  const { counter, inProgress } = useGameContext();\n  const canvasRef = useRef(null);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [last, setLast] = useState({\n    x: undefined,\n    y: undefined,\n  });\n\n  useEffect(() => {\n    if (mouseDown && inProgress && counter && counter < 20) {\n      guess();\n    }\n  }, [mouseDown, inProgress, counter, guess]);\n\n  function drawLine(canvas, x, y, lastX, lastY) {\n    let context = canvas.getContext(\"2d\");\n\n    context.strokeStyle = \"#000000\";\n    context.lineWidth = 12;\n    context.lineJoin = \"round\";\n\n    context.beginPath();\n    context.moveTo(lastX, lastY);\n    context.lineTo(x, y);\n    context.closePath();\n    context.stroke();\n\n    return [x, y];\n  }\n\n  const handleMouseup = () => {\n    setMouseDown(false);\n    setLast({ x: undefined, y: undefined });\n  };\n\n  const handleMousemove = (e) => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (mouseDown) {\n      const [lastX, lastY] = drawLine(e.target, x, y, last.x, last.y);\n      setLast({ x: lastX, y: lastY });\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.height, canvas.width);\n  }, []);\n\n  return (\n    <canvas\n      height={300}\n      width={300}\n      ref={canvasRef}\n      onMouseDown={() => setMouseDown(true)}\n      onMouseUp={handleMouseup}\n      onMouseMove={(e) => handleMousemove(e)}\n      id={CANVAS_ID}\n      style={{\n        border: \"3px dotted gray\",\n        cursor: \"pointer\",\n      }}\n    />\n  );\n});\n","/**\n * Shuffles array in place\n * @param {Array} a items An array containing the items.\n */\nexport function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n","import * as tf from \"@tensorflow/tfjs\";\nimport { useEffect, useReducer, useRef } from \"react\";\nimport { useCounter } from \"./useCounter\";\nimport { gameReducer, initialGameState } from \"../reducers/gameReducer\";\nimport { getPrediction } from \"../helpers\";\nimport { CANVAS_ID } from \"../components/Canvas\";\nimport { shuffle } from \"../lib/shuffle\";\n\nexport const useControls = (totalRounds, timePerRound) => {\n  const labelRef = useRef(null);\n  const taskRef = useRef(null);\n  const modelRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const { startCounter, counter, stopCounter } = useCounter(timePerRound);\n  const [{ round, task, inProgress, score }, dispatch] = useReducer(\n    gameReducer,\n    initialGameState\n  );\n\n  useEffect(() => {\n    const fetchModels = async () => {\n      const model = await tf.loadLayersModel(\"./model/model.json\");\n      const label = require(\"./../labels.json\");\n\n      labelRef.current = [...label];\n      taskRef.current = shuffle([...label]);\n      modelRef.current = model;\n      canvasRef.current = document.getElementById(CANVAS_ID);\n      startGame();\n    };\n    fetchModels();\n  }, []);\n\n  const startGame = () => {\n    dispatch({ type: \"START_GAME\", payload: taskRef.current[0] });\n  };\n\n  const stopGame = () => {\n    stopCounter();\n    dispatch({ type: \"GAME_OVER\" });\n  };\n\n  const playGame = () => {\n    if (score === totalRounds) {\n      stopCounter();\n      dispatch({ type: \"WIN_GAME\" });\n    } else if (round === totalRounds + 1) {\n      stopCounter();\n      dispatch({ type: \"GAME_OVER\" });\n    } else if (counter === 0) {\n      clearCanvas(canvasRef);\n      stopCounter();\n      dispatch({ type: \"NEW_ROUND\", payload: taskRef.current[round] });\n    }\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n  };\n\n  const guess = async () => {\n    if (modelRef && modelRef.current && canvasRef && canvasRef.current) {\n      const prediction = await getPrediction(canvasRef, modelRef.current);\n      if (prediction && labelRef.current[prediction[0]] === task) {\n        clearCanvas(canvasRef);\n        stopCounter();\n        dispatch({ type: \"WIN_ROUND\", payload: taskRef.current[round] });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (inProgress) {\n      playGame();\n    }\n  });\n\n  return {\n    controls: {\n      startGame,\n      stopGame,\n      clearCanvas,\n      guess,\n      startCounter,\n    },\n    state: {\n      inProgress,\n      task,\n      counter,\n      round,\n      score,\n      totalRounds,\n      timePerRound,\n    },\n  };\n};\n","import { useEffect, useState } from \"react\";\n\nexport const useCounter = (timePerRound) => {\n  const [counter, setCounter] = useState(null);\n\n  const startCounter = () => {\n    setCounter(timePerRound);\n  };\n\n  const stopCounter = () => {\n    setCounter(null);\n  };\n\n  useEffect(() => {\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    return () => clearInterval(timer);\n  });\n\n  return {\n    counter,\n    startCounter,\n    stopCounter,\n  };\n};\n","import React from \"react\";\n\nimport { useGameContext } from \"../hooks/useGameContext\";\n\nexport const Rounds = () => {\n  const { round, totalRounds } = useGameContext();\n  return (\n    <div>\n      Round {round} of {totalRounds}\n    </div>\n  );\n};\n","import { useRef, useEffect } from \"react\";\n\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\nimport Typewriter from \"typewriter-effect\";\nimport \"../styles/typewriter.css\";\n\nimport { usePrevious } from \"../hooks/usePrevious\";\nimport { useGameContext } from \"../hooks/useGameContext\";\n\nconst typewriterOptions = {\n  delay: 30,\n  cursor: \" \",\n  wrapperClassName: \"wrapper\",\n};\n\nexport const Task = ({ startCounter }) => {\n  const [partOne, setPartOne] = useState(null);\n  const [partTwo, setPartTwo] = useState(null);\n  const [partThree, setPartThree] = useState(null);\n\n  const {\n    counter,\n    task,\n    score,\n    inProgress,\n    round,\n    totalRounds,\n    timePerRound,\n  } = useGameContext();\n  const previousTask = usePrevious(task);\n  const previousScore = usePrevious(score);\n\n  const unmountTypewriter = () => {\n    setPartOne(null);\n    setPartTwo(null);\n    setPartThree(null);\n  };\n\n  function counterDidUpdate() {\n    if (counter === 0) {\n      unmountTypewriter();\n    }\n  }\n\n  useEffect(counterDidUpdate, [counter]);\n\n  useEffect(() => {\n    if (score && previousScore !== score) {\n      unmountTypewriter();\n      window.setTimeout(() => setPartOne(\"Nice sketch! You have\"));\n    } else if (\n      inProgress &&\n      task &&\n      previousTask !== task &&\n      round < totalRounds + 1\n    ) {\n      let initialString = \"Close... you have \";\n      if (round === 1) {\n        initialString = \"Let's get started, you have \";\n      }\n      window.setTimeout(() => setPartOne(initialString));\n    }\n  }, [inProgress, previousTask, task, score, previousScore, round]);\n\n  const initType = (typewriter, strings, callback) => {\n    typewriter.typeString(strings).callFunction(callback).start();\n  };\n\n  const renderTypewriter = (key, message, callback) => (\n    <>\n      {message}\n      <Typewriter\n        key={key}\n        options={typewriterOptions}\n        onInit={(typewriter) => initType(typewriter, key, callback)}\n      />\n    </>\n  );\n\n  const one =\n    partOne &&\n    renderTypewriter(partOne, null, () => setPartTwo(\"seconds to draw a\"));\n  const two =\n    partTwo &&\n    renderTypewriter(\n      partTwo,\n      <span className=\"whitespace\">{counter || timePerRound}</span>,\n      () => setPartThree(\"in the box to the left.\")\n    );\n  const three =\n    partThree &&\n    renderTypewriter(\n      partThree,\n      <span className=\"whitespace\">{task}</span>,\n      () => startCounter()\n    );\n\n  return (\n    <div className=\"wrapper\">\n      {one}\n      {two}\n      {three}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo } from \"react\";\nimport { Container, Header, Card, Button, Grid, Icon } from \"semantic-ui-react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport { useControls } from \"../hooks/useControls\";\nimport { Rounds } from \"../components/Rounds\";\nimport { Task } from \"../components/Task\";\nimport { Canvas } from \"../components/Canvas\";\nimport { GameStateContext } from \"../hooks/useGameContext\";\n\nexport const TOTAL_ROUNDS = 10;\nexport const TIME_PER_ROUND = 20;\n\nexport const Play = () => {\n  const { push } = useHistory();\n  const location = useLocation();\n  const totalRounds = location.state?.rounds || TOTAL_ROUNDS;\n  const secondsPerRound = location.state?.seconds || TIME_PER_ROUND;\n\n  const { state, controls } = useControls(totalRounds, secondsPerRound);\n\n  useEffect(() => {\n    if (state.inProgress === false) {\n      push(\"game-over\", { score: state.score });\n    }\n  });\n\n  const memoizedStateValue = useMemo(() => state, [state]);\n\n  return (\n    <GameStateContext.Provider value={{ ...memoizedStateValue }}>\n      <Container style={{ paddingTop: \"10%\" }} text>\n        <Grid columns=\"equal\">\n          <Grid.Row>\n            <Grid.Column>\n              <Card fluid color=\"olive\">\n                <Card.Content>\n                  <Header as=\"h2\">\n                    <Rounds />\n                  </Header>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Grid.Column>\n              <Card fluid raised>\n                <Card.Content style={{ fontSize: \"20px\" }}>\n                  <Grid columns=\"equal\">\n                    <Grid.Row>\n                      <Grid.Column>\n                        <Canvas guess={controls.guess} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <Task startCounter={controls.startCounter} />\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width=\"14\">\n              <Button\n                onClick={controls.clearCanvas}\n                size=\"massive\"\n                color=\"olive\"\n                fluid\n              >\n                Clear Canvas\n              </Button>\n            </Grid.Column>\n            <Grid.Column width=\"two\">\n              <Button\n                onClick={() => push(\"/\")}\n                size=\"massive\"\n                fluid\n                icon\n                basic\n                color=\"olive\"\n              >\n                <Icon name=\"home\" />\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </GameStateContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { Container, Header, Grid, Card, Button, Icon } from \"semantic-ui-react\";\n\nconst gameOverCopy = {\n  low: \"Hmmm, you can probably do better than that!\",\n  mid: \"Not so shabby. Bet you can beat that in the next round!\",\n  high: \"Wow, impressive! You deserve a margarita at the beach 🍸🌴\",\n};\n\nexport const GameOver = () => {\n  const { replace } = useHistory();\n  const { state } = useLocation();\n\n  const score = state ? state.score : 0;\n\n  const copy =\n    score >= 9\n      ? gameOverCopy.high\n      : score >= 5\n      ? gameOverCopy.mid\n      : gameOverCopy.low;\n\n  return (\n    <Container style={{ paddingTop: \"10%\" }} text>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid color=\"blue\">\n              <Card.Content>\n                <Header as=\"h1\">Drawing is hard - Final score {score}</Header>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid raised>\n              <Card.Content style={{ fontSize: \"20px\" }}>\n                <p>GAME OVER!</p>\n                <p>\n                  You scored <strong>{score}</strong> points.\n                </p>\n                <p>{copy}</p>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column width=\"14\">\n            <Button\n              onClick={() => replace(\"/play\")}\n              size=\"massive\"\n              color=\"blue\"\n              fluid\n            >\n              Play again\n            </Button>\n          </Grid.Column>\n          <Grid.Column width=\"two\">\n            <Button\n              onClick={() => replace(\"/\")}\n              size=\"massive\"\n              fluid\n              icon\n              basic\n              color=\"blue\"\n              aria-label=\"home\"\n            >\n              <Icon name=\"home\" />\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Grid, Header, Card, Button } from \"semantic-ui-react\";\nimport { useState } from \"react\";\n\nexport const Settings = () => {\n  const { push } = useHistory();\n  const [rounds, setRounds] = useState(10);\n  const [seconds, setSeconds] = useState(20);\n\n  return (\n    <Container style={{ paddingTop: \"10%\" }} text>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid color=\"orange\">\n              <Card.Content>\n                <Header as=\"h1\">Settings</Header>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid raised>\n              <Card.Content\n                style={{\n                  fontSize: \"20px\",\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  flexDirection: \"column\",\n                }}\n              >\n                <div\n                  style={{\n                    fontSize: \"20px\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    marginBottom: \"16px\",\n                  }}\n                >\n                  <label htmlFor=\"rounds\">Number of rounds</label>\n                  <input\n                    type=\"range\"\n                    id=\"rounds\"\n                    name=\"rounds\"\n                    min=\"1\"\n                    max=\"10\"\n                    step=\"1\"\n                    value={rounds}\n                    onChange={(e) => setRounds(parseInt(e.target.value))}\n                  />\n                  {rounds}\n                </div>\n                <div\n                  style={{\n                    fontSize: \"20px\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <label htmlFor=\"rounds\">Seconds per round</label>\n                  <input\n                    type=\"range\"\n                    id=\"rounds\"\n                    name=\"rounds\"\n                    min=\"5\"\n                    max=\"30\"\n                    step=\"5\"\n                    value={seconds}\n                    onChange={(e) => setSeconds(parseInt(e.target.value))}\n                  />\n                  {seconds}\n                </div>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Button\n              onClick={() => push(\"/\", { rounds, seconds })}\n              size=\"massive\"\n              color=\"orange\"\n              fluid\n            >\n              Save and go back\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Home } from \"./pages/home\";\nimport { Play } from \"./pages/play\";\nimport { GameOver } from \"./pages/game-over\";\nimport { Settings } from \"./pages/settings\";\n\nexport const App = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/settings\">\n          <Settings />\n        </Route>\n        <Route path=\"/play\">\n          <Play />\n        </Route>\n        <Route path=\"/game-over\">\n          <GameOver />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}