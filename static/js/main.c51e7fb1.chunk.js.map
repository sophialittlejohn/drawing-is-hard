{"version":3,"sources":["pages/home.js","hooks/useCounter.js","reducers/gameReducer.js","helpers.js","hooks/useGameContext.js","components/Canvas.js","lib/shuffle.js","hooks/useControls.js","components/Rounds.js","hooks/usePrevious.js","components/Task.js","pages/play.js","pages/game-over.js","App.js","index.js"],"names":["Home","push","useHistory","Container","style","paddingTop","text","Grid","Row","Column","Card","fluid","color","Content","Header","as","raised","fontSize","href","Button","onClick","size","primary","useCounter","useState","counter","setCounter","useEffect","timer","setInterval","clearInterval","startCounter","value","TIME_PER_ROUND","stopCounter","initialGameState","task","round","score","inProgress","gameReducer","state","action","type","payload","Error","getPrediction","theCanvas","model","canvas","tensor","tf","fromPixels","current","resizeNearestNeighbor","mean","expandDims","toFloat","div","predict","data","then","prediction","a","GameStateContext","React","createContext","useGameContext","context","useContext","Canvas","memo","guess","canvasRef","useRef","mouseDown","setMouseDown","x","undefined","y","last","setLast","getContext","fillStyle","fillRect","height","width","ref","onMouseDown","onMouseUp","onMouseMove","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","lastX","lastY","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","id","border","cursor","shuffle","i","length","j","Math","floor","random","Rounds","TOTAL_ROUNDS","usePrevious","typewriterOptions","delay","wrapperClassName","Task","partOne","setPartOne","partTwo","setPartTwo","partThree","setPartThree","previousTask","previousScore","unmountTypewriter","window","setTimeout","initialString","renderTypewriter","key","message","callback","options","onInit","typewriter","strings","typeString","callFunction","start","initType","one","two","className","three","Play","totalRounds","labelRef","taskRef","modelRef","useReducer","dispatch","label","require","document","getElementById","startGame","fetchModels","stopGame","playGame","clearCanvas","controls","useControls","memoizedStateValue","useMemo","Provider","columns","stretched","icon","basic","Icon","name","gameOverCopy","GameOver","replace","useLocation","copy","aria-label","App","basename","process","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.c51e7fb1.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Grid, Header, Card, Button } from \"semantic-ui-react\";\n\nexport const Home = () => {\n  const { push } = useHistory();\n\n  return (\n    <Container style={{ paddingTop: \"10%\" }} text>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid color=\"blue\">\n              <Card.Content>\n                <Header as=\"h1\">Drawing Is Hard</Header>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid raised>\n              <Card.Content style={{ fontSize: \"20px\" }}>\n                <p>\n                  This game has been modeled off Google's{\" \"}\n                  <a href=\"https://quickdraw.withgoogle.com/\">Quick, Draw!</a>{\" \"}\n                  game and uses a sampling from the Quick, Draw! dataset.\n                </p>\n                <p>\n                  It was developed in the context of my capstone project at{\" \"}\n                  <a href=\"https://www.extensionschool.ch/\">\n                    EPFL Extension School\n                  </a>\n                  .\n                </p>\n                <p>\n                  Check out the source code in my{\" \"}\n                  <a href=\"https://github.com/sophialittlejohn/drawing-is-hard\">\n                    GitHub repo\n                  </a>\n                  .\n                </p>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Button onClick={() => push(\"/play\")} size=\"massive\" primary fluid>\n              Play\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nimport { TIME_PER_ROUND } from \"../pages/play\";\n\nexport const useCounter = () => {\n  const [counter, setCounter] = useState(null);\n\n  const startCounter = (value) => {\n    setCounter(value || TIME_PER_ROUND);\n  };\n\n  const stopCounter = () => {\n    setCounter(null);\n  };\n\n  useEffect(() => {\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    return () => clearInterval(timer);\n  });\n\n  return {\n    counter,\n    startCounter,\n    stopCounter,\n  };\n};\n","export const initialGameState = {\n  task: null,\n  round: null,\n  score: null,\n  inProgress: null,\n};\n\nexport const gameReducer = (state, action) => {\n  switch (action.type) {\n    case \"START_GAME\":\n      return { round: 1, score: 0, task: action.payload, inProgress: true };\n    case \"NEW_ROUND\":\n      return { ...state, task: action.payload, round: state.round + 1 };\n    case \"WIN_ROUND\":\n      return {\n        ...state,\n        score: state.score + 1,\n        round: state.round + 1,\n        task: action.payload,\n      };\n    case \"GAME_OVER\":\n      return { ...state, inProgress: false, task: null };\n    case \"WIN_GAME\":\n      return { ...state, inProgress: false };\n    default:\n      throw new Error();\n  }\n};\n","import * as tf from \"@tensorflow/tfjs\";\n\nfunction preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf.browser\n    .fromPixels(canvas.current) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(theCanvas, model) {\n  const tensor = preprocessCanvas(theCanvas);\n  return model\n    .predict(tensor)\n    .data()\n    .then(async (prediction) => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n}\n","import React, { useContext } from \"react\";\n\nexport const GameStateContext = React.createContext();\n\nexport const useGameContext = () => {\n  const context = useContext(GameStateContext);\n  if (!context) {\n    throw new Error(\"This component must be used within a <Game /> component.\");\n  }\n  return context;\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useGameContext } from \"../hooks/useGameContext\";\n\nexport const CANVAS_ID = \"myCanvas\";\n\nexport const Canvas = React.memo(({ guess }) => {\n  const { counter, inProgress } = useGameContext();\n  const canvasRef = useRef(null);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [last, setLast] = useState({\n    x: undefined,\n    y: undefined,\n  });\n\n  useEffect(() => {\n    if (mouseDown && inProgress && counter && counter < 20) {\n      guess();\n    }\n  }, [mouseDown, inProgress, counter, guess]);\n\n  function drawLine(canvas, x, y, lastX, lastY) {\n    let context = canvas.getContext(\"2d\");\n\n    context.strokeStyle = \"#000000\";\n    context.lineWidth = 12;\n    context.lineJoin = \"round\";\n\n    context.beginPath();\n    context.moveTo(lastX, lastY);\n    context.lineTo(x, y);\n    context.closePath();\n    context.stroke();\n\n    return [x, y];\n  }\n\n  const handleMouseup = () => {\n    setMouseDown(false);\n    setLast({ x: undefined, y: undefined });\n  };\n\n  const handleMousemove = (e) => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (mouseDown) {\n      const [lastX, lastY] = drawLine(e.target, x, y, last.x, last.y);\n      setLast({ x: lastX, y: lastY });\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    context.fillStyle = \"#ffffff\";\n    context.fillRect(0, 0, canvas.height, canvas.width);\n  }, []);\n\n  return (\n    <canvas\n      height={300}\n      width={300}\n      ref={canvasRef}\n      onMouseDown={() => setMouseDown(true)}\n      onMouseUp={handleMouseup}\n      onMouseMove={(e) => handleMousemove(e)}\n      id={CANVAS_ID}\n      style={{\n        border: \"3px dotted gray\",\n        cursor: \"pointer\",\n      }}\n    />\n  );\n});\n","/**\n * Shuffles array in place\n * @param {Array} a items An array containing the items.\n */\nexport function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n","import * as tf from \"@tensorflow/tfjs\";\nimport { useEffect, useReducer, useRef } from \"react\";\nimport { useCounter } from \"./useCounter\";\nimport { gameReducer, initialGameState } from \"../reducers/gameReducer\";\nimport { getPrediction } from \"../helpers\";\nimport { TOTAL_ROUNDS } from \"../pages/play\";\nimport { CANVAS_ID } from \"../components/Canvas\";\nimport { shuffle } from \"../lib/shuffle\";\n\nexport const useControls = (totalRounds = TOTAL_ROUNDS) => {\n  const labelRef = useRef(null);\n  const taskRef = useRef(null);\n  const modelRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const { startCounter, counter, stopCounter } = useCounter();\n  const [{ round, task, inProgress, score }, dispatch] = useReducer(\n    gameReducer,\n    initialGameState\n  );\n\n  useEffect(() => {\n    const fetchModels = async () => {\n      const model = await tf.loadLayersModel(\"./model/model.json\");\n      const label = require(\"./../labels.json\");\n\n      labelRef.current = [...label];\n      taskRef.current = shuffle([...label]);\n      modelRef.current = model;\n      canvasRef.current = document.getElementById(CANVAS_ID);\n      startGame();\n    };\n    fetchModels();\n  }, []);\n\n  const startGame = () => {\n    dispatch({ type: \"START_GAME\", payload: taskRef.current[0] });\n  };\n\n  const stopGame = () => {\n    stopCounter();\n    dispatch({ type: \"GAME_OVER\" });\n  };\n\n  const playGame = () => {\n    if (score === totalRounds) {\n      stopCounter();\n      dispatch({ type: \"WIN_GAME\" });\n    } else if (round === totalRounds + 1) {\n      stopCounter();\n      dispatch({ type: \"GAME_OVER\" });\n    } else if (counter === 0) {\n      clearCanvas(canvasRef);\n      stopCounter();\n      dispatch({ type: \"NEW_ROUND\", payload: taskRef.current[round] });\n    }\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n  };\n\n  const guess = async () => {\n    if (modelRef && modelRef.current && canvasRef && canvasRef.current) {\n      const prediction = await getPrediction(canvasRef, modelRef.current);\n      if (prediction && labelRef.current[prediction[0]] === task) {\n        clearCanvas(canvasRef);\n        stopCounter();\n        dispatch({ type: \"WIN_ROUND\", payload: taskRef.current[round] });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (inProgress) {\n      playGame();\n    }\n  });\n\n  return {\n    controls: {\n      startGame,\n      stopGame,\n      clearCanvas,\n      guess,\n      startCounter,\n    },\n    state: {\n      inProgress,\n      task,\n      counter,\n      round,\n      score,\n    },\n  };\n};\n","import React from \"react\";\n\nimport { useGameContext } from \"../hooks/useGameContext\";\nimport { TOTAL_ROUNDS } from \"../pages/play\";\n\nexport const Rounds = () => {\n  const round = useGameContext();\n  return (\n    <div>\n      Round {round.round} of {TOTAL_ROUNDS}\n    </div>\n  );\n};\n","import { useRef, useEffect } from \"react\";\n\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\nimport Typewriter from \"typewriter-effect\";\nimport \"../styles/typewriter.css\";\n\nimport { usePrevious } from \"../hooks/usePrevious\";\nimport { useGameContext } from \"../hooks/useGameContext\";\nimport { TIME_PER_ROUND, TOTAL_ROUNDS } from \"../pages/play\";\n\nconst typewriterOptions = {\n  delay: 30,\n  cursor: \" \",\n  wrapperClassName: \"wrapper\",\n};\n\nexport const Task = ({ startCounter }) => {\n  const [partOne, setPartOne] = useState(null);\n  const [partTwo, setPartTwo] = useState(null);\n  const [partThree, setPartThree] = useState(null);\n\n  const { counter, task, score, inProgress, round } = useGameContext();\n  const previousTask = usePrevious(task);\n  const previousScore = usePrevious(score);\n\n  const unmountTypewriter = () => {\n    setPartOne(null);\n    setPartTwo(null);\n    setPartThree(null);\n  };\n\n  function counterDidUpdate() {\n    if (counter === 0) {\n      unmountTypewriter();\n    }\n  }\n\n  useEffect(counterDidUpdate, [counter]);\n\n  useEffect(() => {\n    if (score && previousScore !== score) {\n      unmountTypewriter();\n      window.setTimeout(() => setPartOne(\"Nice sketch! You have\"));\n    } else if (\n      inProgress &&\n      task &&\n      previousTask !== task &&\n      round < TOTAL_ROUNDS + 1\n    ) {\n      let initialString = \"Close... you have \";\n      if (round === 1) {\n        initialString = \"Let's get started, you have \";\n      }\n      window.setTimeout(() => setPartOne(initialString));\n    }\n  }, [inProgress, previousTask, task, score, previousScore, round]);\n\n  const initType = (typewriter, strings, callback) => {\n    typewriter.typeString(strings).callFunction(callback).start();\n  };\n\n  const renderTypewriter = (key, message, callback) => (\n    <>\n      {message}\n      <Typewriter\n        key={key}\n        options={typewriterOptions}\n        onInit={(typewriter) => initType(typewriter, key, callback)}\n      />\n    </>\n  );\n\n  const one =\n    partOne &&\n    renderTypewriter(partOne, null, () => setPartTwo(\"seconds to draw a\"));\n  const two =\n    partTwo &&\n    renderTypewriter(\n      partTwo,\n      <span className=\"whitespace\">{counter || TIME_PER_ROUND}</span>,\n      () => setPartThree(\"in the box to the left.\")\n    );\n  const three =\n    partThree &&\n    renderTypewriter(\n      partThree,\n      <span className=\"whitespace\">{task}</span>,\n      () => startCounter()\n    );\n\n  return (\n    <div className=\"wrapper\">\n      {one}\n      {two}\n      {three}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo } from \"react\";\nimport { Container, Header, Card, Button, Grid, Icon } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useControls } from \"../hooks/useControls\";\nimport { Rounds } from \"../components/Rounds\";\nimport { Task } from \"../components/Task\";\nimport { Canvas } from \"../components/Canvas\";\nimport { GameStateContext } from \"../hooks/useGameContext\";\n\nexport const TOTAL_ROUNDS = 10;\nexport const TIME_PER_ROUND = 20;\n\nexport const Play = () => {\n  const { push } = useHistory();\n  const { state, controls } = useControls();\n\n  useEffect(() => {\n    if (state.inProgress === false) {\n      push(\"game-over\", { score: state.score });\n    }\n  });\n\n  const memoizedStateValue = useMemo(() => state, [state]);\n\n  return (\n    <GameStateContext.Provider value={{ ...memoizedStateValue }}>\n      <Container style={{ paddingTop: \"10%\" }} text>\n        <Grid columns=\"equal\">\n          <Grid.Row>\n            <Grid.Column>\n              <Card fluid color=\"olive\">\n                <Card.Content>\n                  <Header as=\"h2\">\n                    <Rounds />\n                  </Header>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Grid.Column>\n              <Card fluid raised>\n                <Card.Content style={{ fontSize: \"20px\" }}>\n                  <Grid columns=\"equal\">\n                    <Grid.Row>\n                      <Grid.Column>\n                        <Canvas guess={controls.guess} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <Task startCounter={controls.startCounter} />\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width=\"14\">\n              <Button\n                onClick={controls.clearCanvas}\n                size=\"massive\"\n                color=\"olive\"\n                fluid\n              >\n                Clear Canvas\n              </Button>\n            </Grid.Column>\n            <Grid.Column width=\"two\">\n              <Button\n                onClick={() => push(\"/\")}\n                size=\"massive\"\n                fluid\n                icon\n                basic\n                color=\"olive\"\n              >\n                <Icon name=\"home\" />\n              </Button>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </GameStateContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { Container, Header, Grid, Card, Button, Icon } from \"semantic-ui-react\";\n\nconst gameOverCopy = {\n  low: \"Hmmm, you can probably do better than that!\",\n  mid: \"Not so shabby. Bet you can beat that in the next round!\",\n  high: \"Wow, impressive! You deserve a margarita at the beach 🍸🌴\",\n};\n\nexport const GameOver = () => {\n  const { replace } = useHistory();\n  const { state } = useLocation();\n\n  const score = state ? state.score : 0;\n\n  const copy =\n    score >= 9\n      ? gameOverCopy.high\n      : score >= 5\n      ? gameOverCopy.mid\n      : gameOverCopy.low;\n\n  return (\n    <Container style={{ paddingTop: \"10%\" }} text>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid color=\"blue\">\n              <Card.Content>\n                <Header as=\"h1\">Drawing is hard - Final score {score}</Header>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column>\n            <Card fluid raised>\n              <Card.Content style={{ fontSize: \"20px\" }}>\n                <p>GAME OVER!</p>\n                <p>\n                  You scored <strong>{score}</strong> points.\n                </p>\n                <p>{copy}</p>\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Column width=\"14\">\n            <Button\n              onClick={() => replace(\"/play\")}\n              size=\"massive\"\n              color=\"blue\"\n              fluid\n            >\n              Play again\n            </Button>\n          </Grid.Column>\n          <Grid.Column width=\"two\">\n            <Button\n              onClick={() => replace(\"/\")}\n              size=\"massive\"\n              fluid\n              icon\n              basic\n              color=\"blue\"\n              aria-label=\"home\"\n            >\n              <Icon name=\"home\" />\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\n\nimport { Home } from \"./pages/home\";\nimport { Play } from \"./pages/play\";\nimport { GameOver } from \"./pages/game-over\";\n\nexport const App = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/play\">\n          <Play />\n        </Route>\n        <Route path=\"/game-over\">\n          <GameOver />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}